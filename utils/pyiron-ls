#!/usr/bin/env python3.7
"""
Prints jobs from pyiron project.
"""

import argparse
import datetime
import re
import sys
import numpy as np
import pandas as pd
import pyiron
import pyiron.base.job.jobstatus


parser = argparse.ArgumentParser(description = __doc__)
parser.add_argument(
        "project", default = ".", nargs = "?",
        help = "path to pyiron project"
)

filter = parser.add_argument_group(
        title = "filter",
        description = "select which jobs to show, all filters must be true "
                      "for a job to be listed"
)
filter.add_argument(
        "-r", "--recursive", action = "store_true",
        help = "recurse into sub projects"
)
filter.add_argument(
        "-n", "--name", default = "", type = re.compile,
        help = "job name must contain this, regex allowed"
)
filter.add_argument(
        "-e", "--elements", nargs = "+",
        help = "chemical elements that must be present in unit cell"
)
filter.add_argument(
        "-s", "--status", nargs = "+",
        choices = pyiron.base.job.jobstatus.job_status_lst,
        help = "job status must be one of the given"
)
filter.add_argument(
        "-i", "--since",
        help = "timestop must be less then the given duration before now "
)

output = parser.add_argument_group(
        title = "output", description = "control output style"
)
output.add_argument(
        "-c", "--columns", nargs = "+",
        choices = ('id', 'status', 'chemicalformula', 'job', 'subjob',
            'project', 'projectpath', 'timestart', 'timestop', 'totalcputime',
            'computer', 'hamilton', 'hamversion', 'parentid', 'masterid'),
        default = ["id", "status", "job", "timestart", "timestop", "totalcputime"],
        help = "table columns to print, pass 'all' to print whole table"
)
output.add_argument(
        "-a", "--all", action = "store_true",
        help = "show all job attributes"
)

args = parser.parse_args()

if args.status:
    if "status" not in args.columns:
        args.columns = args.columns + ["status"]

if args.since:
    if "timestop" not in args.columns:
        args.columns = args.columns + ["timestop"]
    try:
        matches = re.fullmatch("(\d+d)?\w*(\d+h)?\w*(\d+m)?\w*(\d+s)?",
                               args.since).groups(default = '0x')
        since = datetime.datetime.now() - datetime.timedelta(
                days    = int(matches[0][:-1]),
                hours   = int(matches[1][:-1]),
                minutes = int(matches[2][:-1]),
                seconds = int(matches[3][:-1])
        )
    except AttributeError:
        print("ERROR: {} is not a proper time delta".format(args.since),
              file = sys.stderr)
        sys.exit(1)

table = pyiron.Project(args.project).job_table(
    full_table = True, recursive = args.recursive,
    columns = args.columns, all_columns = args.all,
    element_lst = args.elements,
    job_name_contains = args.name
)

if len(table) == 0:
    sys.exit(0)

mask = [True] * len(table)
if args.status:
    mask &= table.loc[:, "status"].isin(args.status)
if args.since:
    mask &= table.loc[:, "timestop"] > since

if any(mask):
    print(table[mask])
