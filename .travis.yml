matrix:
  include:
    - stage: test
      name: test_linux_2_7
      os: linux
      language: python
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh" PYTHONVER="2.7"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
      script:
        - coverage run -m unittest discover tests
        - ./.ci_support/build_notebooks_on_master.sh
    - name: test_linux_3_6
      os: linux
      language: python
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" PYTHONVER="3.6"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}

      script:
        - coverage run -m unittest discover tests
        - ./.ci_support/build_notebooks_on_master.sh

      after_success:
        - coveralls

      deploy:
        - provider: pypi
          user: pyiron
          password: ${PYPI_UPLOAD_TOKEN}
          allow_failure: true
          on:
            branch: master
        - provider: pypi
          user: pyiron
          password: ${PYPI_UPLOAD_TOKEN}
          allow_failure: true
          on:
            tags: true
        - provider: script
          script: conda build --python ${PYTHONVER} --user pyiron --token ${CONDA_UPLOAD_TOKEN} conda/pyiron
          on:
            branch: master
        - provider: script
          script: conda build --python ${PYTHONVER} --user pyiron --token ${CONDA_UPLOAD_TOKEN} conda/pyiron
          on:
            tags: true

    - name: test_osx_2_7
      os: osx
      language: generic
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh" PYTHONVER="2.7"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
      script:
        - coverage run -m unittest discover tests
        - ./.ci_support/build_notebooks_on_master.sh
    - name: test_osx_3_6
      os: osx
      language: generic
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" PYTHONVER="3.6"
      install:
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
      script:
        - coverage run -m unittest discover tests
        - ./.ci_support/build_notebooks_on_master.sh
    - stage: documentation
      if: branch = master
      name: documentation
      os: linux
      language: python
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" PYTHONVER="3.6"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
      script:
        - ./.ci_support/build_docs_on_master.sh
      deploy:
        - provider: pages
          repo: pyiron/pyiron.github.io
          target_branch: master
          skip_cleanup: true
          github_token: $GH_TOKEN
          local_dir: ../pyiron.github.io
          on:
            branch: master
    - stage: docker
      if: branch = master
      name: docker
      sudo: required
      services:
        - docker
      language: generic
      env:
        global:
          - COMMIT=${TRAVIS_COMMIT::8}
      script:
        - mv binder/docker/* .
        - docker build -t pyiron -f ./Dockerfile .
      deploy:
        - provider: script
          skip_cleanup: true
          script: ./deploy.sh
          on:
             all_branches: true
             repo: pyiron/examples
